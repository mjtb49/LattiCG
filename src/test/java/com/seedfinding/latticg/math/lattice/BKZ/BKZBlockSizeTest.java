package com.seedfinding.latticg.math.lattice.BKZ;


import com.seedfinding.latticg.math.component.BigMatrix;
import com.seedfinding.latticg.math.lattice.LLL.Params;
import com.seedfinding.latticg.math.lattice.LLL.Result;
import com.seedfinding.latticg.math.lattice.optimization.BKZ;
import org.junit.BeforeClass;
import org.junit.Test;

import static com.seedfinding.latticg.math.lattice.LLL.Params.recommendedDelta;
import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertNotNull;
//@formatter:off
/**
 * The following C++ code was used, you need to input a matrix in a file like that [[1 2][3 4]]
 * (you can however use as many space in between numbers only), here block size 2 and 3 are different from 4 to 12
 *
 *  void printPrettyMatrix(const NTL::mat_ZZ& BB){
 *     cout<<"{";
 *     for (int i = 0; i < BB.NumRows(); ++i) {
 *         cout<<"{";
 *         for (int j = 0; j < BB.NumCols(); ++j) {
 *             cout<<BB.get(i,j);
 *             if (j!=BB.NumCols()-1){
 *                 cout<<",";
 *             }
 *         }
 *         cout<<"}";
 *
 *         if (i!=BB.NumRows()-1){
 *             cout<<","<<endl;
 *         }
 *     }
 *     cout<<"}"<<endl;
 * }
 * int main(int argc, const char *argv[]) {
 *      NTL::mat_ZZ BB;
 *     std::ifstream input_file(argv[1]);
 *
 *     //Try to read Base file
 *     if (input_file.is_open()) {
 *         input_file >> BB;
 *         input_file.close();
 *     } else {
 *         printf("File was not read\n");
 *         exit(-1);
 *     }
 *
 *     //To call LLL or BKZ of NTL
 *     for (int i = 2; i < BB.NumRows(); ++i) {
 *         NTL::BKZ_QP(BB, 0.99, i);
 *         cout<<i<<endl;
 *         printPrettyMatrix(BB);
 *     }
 *  }
 */
//@formatter:on

public class BKZBlockSizeTest {
    static BigMatrix basis = null;
    static BigMatrix control = null;
    static Params params = null;

    @BeforeClass
    public static void initMatrix() {
        basis = BigMatrix.fromString(
            "{{1,25214903917,205749139540585,233752471717045,55986898099985,120950523281469,76790647859193,61282721086213,128954768138017,177269950146317,19927021227657,92070806603349}," +
                "{0, 281474976710656, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}," +
                "{0, 0, 281474976710656, 0, 0, 0, 0, 0, 0, 0, 0, 0}," +
                "{0, 0, 0, 281474976710656, 0, 0, 0, 0, 0, 0, 0, 0}," +
                "{0, 0, 0, 0, 281474976710656, 0, 0, 0, 0, 0, 0, 0}," +
                "{0, 0, 0, 0, 0, 281474976710656, 0, 0, 0, 0, 0, 0}," +
                "{0, 0, 0, 0, 0, 0, 281474976710656, 0, 0, 0, 0, 0}," +
                "{0, 0, 0, 0, 0, 0, 0, 281474976710656, 0, 0, 0, 0}," +
                "{0, 0, 0, 0, 0, 0, 0, 0, 281474976710656, 0, 0, 0}," +
                "{0, 0, 0, 0, 0, 0, 0, 0, 0, 281474976710656, 0, 0}," +
                "{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 281474976710656, 0}," +
                "{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 281474976710656}}");
        control = BigMatrix.fromString(
            "{{1,25214903917,205749139540585,233752471717045,55986898099985,120950523281469,76790647859193,61282721086213,128954768138017,177269950146317,19927021227657,92070806603349}," +
                "{0, 281474976710656, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}," +
                "{0, 0, 281474976710656, 0, 0, 0, 0, 0, 0, 0, 0, 0}," +
                "{0, 0, 0, 281474976710656, 0, 0, 0, 0, 0, 0, 0, 0}," +
                "{0, 0, 0, 0, 281474976710656, 0, 0, 0, 0, 0, 0, 0}," +
                "{0, 0, 0, 0, 0, 281474976710656, 0, 0, 0, 0, 0, 0}," +
                "{0, 0, 0, 0, 0, 0, 281474976710656, 0, 0, 0, 0, 0}," +
                "{0, 0, 0, 0, 0, 0, 0, 281474976710656, 0, 0, 0, 0}," +
                "{0, 0, 0, 0, 0, 0, 0, 0, 281474976710656, 0, 0, 0}," +
                "{0, 0, 0, 0, 0, 0, 0, 0, 0, 281474976710656, 0, 0}," +
                "{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 281474976710656, 0}," +
                "{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 281474976710656}}");
        params = new Params().setDelta(recommendedDelta);
    }

    @Test
    public void testInit() {
        assertNotNull(basis);
        assertNotNull(control);
        assertNotNull(params);
        assertEquals(basis.toPrettyString(), control.toPrettyString());
    }

    @Test(expected = IllegalArgumentException.class)
    public void testZero() {
        Result result = BKZ.reduce(basis, 0, params);
    }

    @Test(expected = IllegalArgumentException.class)
    public void testOne() {
        Result result = BKZ.reduce(basis, 1, params);
    }

    @Test
    public void testTwo() {
        BigMatrix expected = BigMatrix.fromString("{{-3220584277339,-678163098047,-8530386804819,4029288934057,2295848026101,-9298238777007,-3232365392515,-4654942041031,3688082483781,1145092603233,4158323460173,-885077887287},\n" +
            "{-3340516617460,-7558844095460,2998660220908,-8923438766212,-11379173214260,4848015968732,478738963116,-5542299589828,2136460257420,4611134868380,5522033236332,2757441428220},\n" +
            "{10984234085718,-6406011989602,-1266420501434,1751661913550,8482227530934,-4526287024770,761009140390,6928756995246,-5355554536938,-7387675121826,4984680789766,-3267431673458},\n" +
            "{-4681649624622,12840992848490,-9649058669790,-5690163127942,1452987348210,5210479671050,581779614530,-1145467111654,5983719952914,-859604623958,7180148317538,530133880506},\n" +
            "{-4353713886109,-3909056866265,5885683045019,289721495039,8491180601235,-9745719766121,5398662267211,3436570980079,-7847088474685,-4036536560121,-5546606089477,6733721325279},\n" +
            "{2920819071883,-1626942694353,2223911254531,584029693255,14030410377531,-9489189449697,-2775806675149,-11313375243593,2173687030251,-3049350737137,-10149066516637,5905056311079},\n" +
            "{-1753331234266,-1925513677266,13587559884182,-4245051751202,-2137179994490,-6553268425970,-6365069498122,517301695678,2263559792870,-11305224483346,-4442850524586,-530899844450},\n" +
            "{4275813471710,-8854105259130,5271931937806,10923452673526,-3574547704386,-1170843994650,-3291920410898,-3656525195434,-4156752563298,11504064802374,16423165925326,1863615493814},\n" +
            "{-2927275271675,4358198759969,-749428089331,-5906764121719,6996620318037,-8434527046863,4013008064989,10544347457817,4690845726117,-1572849494719,-1562550095187,-15622834716247},\n" +
            "{3913481047550,11457107519782,11295936833838,-4892876006250,-2349194285090,-3961586281082,-10007826133490,-9624601063434,-4233142841410,5269765269478,-132373012242,-8329452594858},\n" +
            "{8462157635811,1251368972967,-1652918150373,1387004841087,1717588765715,-2363517938153,10131123425739,-11456623266449,5477436914243,-4759160995705,5496978719611,-6245443060385},\n" +
            "{14276340518069,11302502565649,-760697010115,6141148139513,-8322341108987,-2402663381215,6840633257741,3747223598729,-6011287794091,3767907907633,-10053902617891,6917101368857}}");
        Result result = BKZ.reduce(basis, 2, params);
        assertEquals(basis.toPrettyString(), control.toPrettyString());
        assertEquals(expected.toPrettyString(), result.getReducedBasis().toPrettyString());
    }

    @Test
    public void testThree() {
        BigMatrix expected = BigMatrix.fromString("{{-3220584277339,-678163098047,-8530386804819,4029288934057,2295848026101,-9298238777007,-3232365392515,-4654942041031,3688082483781,1145092603233,4158323460173,-885077887287},\n" +
            "{-3340516617460,-7558844095460,2998660220908,-8923438766212,-11379173214260,4848015968732,478738963116,-5542299589828,2136460257420,4611134868380,5522033236332,2757441428220},\n" +
            "{10984234085718,-6406011989602,-1266420501434,1751661913550,8482227530934,-4526287024770,761009140390,6928756995246,-5355554536938,-7387675121826,4984680789766,-3267431673458},\n" +
            "{-4681649624622,12840992848490,-9649058669790,-5690163127942,1452987348210,5210479671050,581779614530,-1145467111654,5983719952914,-859604623958,7180148317538,530133880506},\n" +
            "{-4353713886109,-3909056866265,5885683045019,289721495039,8491180601235,-9745719766121,5398662267211,3436570980079,-7847088474685,-4036536560121,-5546606089477,6733721325279},\n" +
            "{2920819071883,-1626942694353,2223911254531,584029693255,14030410377531,-9489189449697,-2775806675149,-11313375243593,2173687030251,-3049350737137,-10149066516637,5905056311079},\n" +
            "{-1753331234266,-1925513677266,13587559884182,-4245051751202,-2137179994490,-6553268425970,-6365069498122,517301695678,2263559792870,-11305224483346,-4442850524586,-530899844450},\n" +
            "{4275813471710,-8854105259130,5271931937806,10923452673526,-3574547704386,-1170843994650,-3291920410898,-3656525195434,-4156752563298,11504064802374,16423165925326,1863615493814},\n" +
            "{-2927275271675,4358198759969,-749428089331,-5906764121719,6996620318037,-8434527046863,4013008064989,10544347457817,4690845726117,-1572849494719,-1562550095187,-15622834716247},\n" +
            "{3913481047550,11457107519782,11295936833838,-4892876006250,-2349194285090,-3961586281082,-10007826133490,-9624601063434,-4233142841410,5269765269478,-132373012242,-8329452594858},\n" +
            "{8462157635811,1251368972967,-1652918150373,1387004841087,1717588765715,-2363517938153,10131123425739,-11456623266449,5477436914243,-4759160995705,5496978719611,-6245443060385},\n" +
            "{14276340518069,11302502565649,-760697010115,6141148139513,-8322341108987,-2402663381215,6840633257741,3747223598729,-6011287794091,3767907907633,-10053902617891,6917101368857}}");
        Result result = BKZ.reduce(basis, 3, params);
        assertEquals(basis.toPrettyString(), control.toPrettyString());
        assertEquals(expected.toPrettyString(), result.getReducedBasis().toPrettyString());
    }

    @Test
    public void testFour() {
        BigMatrix expected = BigMatrix.fromString("{{-3220584277339,-678163098047,-8530386804819,4029288934057,2295848026101,-9298238777007,-3232365392515,-4654942041031,3688082483781,1145092603233,4158323460173,-885077887287},\n" +
            "{-3340516617460,-7558844095460,2998660220908,-8923438766212,-11379173214260,4848015968732,478738963116,-5542299589828,2136460257420,4611134868380,5522033236332,2757441428220},\n" +
            "{10984234085718,-6406011989602,-1266420501434,1751661913550,8482227530934,-4526287024770,761009140390,6928756995246,-5355554536938,-7387675121826,4984680789766,-3267431673458},\n" +
            "{-4681649624622,12840992848490,-9649058669790,-5690163127942,1452987348210,5210479671050,581779614530,-1145467111654,5983719952914,-859604623958,7180148317538,530133880506},\n" +
            "{-4353713886109,-3909056866265,5885683045019,289721495039,8491180601235,-9745719766121,5398662267211,3436570980079,-7847088474685,-4036536560121,-5546606089477,6733721325279},\n" +
            "{2920819071883,-1626942694353,2223911254531,584029693255,14030410377531,-9489189449697,-2775806675149,-11313375243593,2173687030251,-3049350737137,-10149066516637,5905056311079},\n" +
            "{8462157635811,1251368972967,-1652918150373,1387004841087,1717588765715,-2363517938153,10131123425739,-11456623266449,5477436914243,-4759160995705,5496978719611,-6245443060385},\n" +
            "{-1753331234266,-1925513677266,13587559884182,-4245051751202,-2137179994490,-6553268425970,-6365069498122,517301695678,2263559792870,-11305224483346,-4442850524586,-530899844450},\n" +
            "{4275813471710,-8854105259130,5271931937806,10923452673526,-3574547704386,-1170843994650,-3291920410898,-3656525195434,-4156752563298,11504064802374,16423165925326,1863615493814},\n" +
            "{-2927275271675,4358198759969,-749428089331,-5906764121719,6996620318037,-8434527046863,4013008064989,10544347457817,4690845726117,-1572849494719,-1562550095187,-15622834716247},\n" +
            "{3913481047550,11457107519782,11295936833838,-4892876006250,-2349194285090,-3961586281082,-10007826133490,-9624601063434,-4233142841410,5269765269478,-132373012242,-8329452594858},\n" +
            "{2061373912094,9210433152198,988237794382,-4258740350666,-2513632749570,-9075210294490,-4284690611410,4090527182486,-660764304930,19160463718278,1862849529870,8595956826614}}");
        Result result = BKZ.reduce(basis, 4, params);
        assertEquals(basis.toPrettyString(), control.toPrettyString());
        assertEquals(expected.toPrettyString(), result.getReducedBasis().toPrettyString());
    }

    @Test
    public void testFive() {
        BigMatrix expected = BigMatrix.fromString("{{-3220584277339,-678163098047,-8530386804819,4029288934057,2295848026101,-9298238777007,-3232365392515,-4654942041031,3688082483781,1145092603233,4158323460173,-885077887287},\n" +
            "{-3340516617460,-7558844095460,2998660220908,-8923438766212,-11379173214260,4848015968732,478738963116,-5542299589828,2136460257420,4611134868380,5522033236332,2757441428220},\n" +
            "{10984234085718,-6406011989602,-1266420501434,1751661913550,8482227530934,-4526287024770,761009140390,6928756995246,-5355554536938,-7387675121826,4984680789766,-3267431673458},\n" +
            "{-4681649624622,12840992848490,-9649058669790,-5690163127942,1452987348210,5210479671050,581779614530,-1145467111654,5983719952914,-859604623958,7180148317538,530133880506},\n" +
            "{-4353713886109,-3909056866265,5885683045019,289721495039,8491180601235,-9745719766121,5398662267211,3436570980079,-7847088474685,-4036536560121,-5546606089477,6733721325279},\n" +
            "{2920819071883,-1626942694353,2223911254531,584029693255,14030410377531,-9489189449697,-2775806675149,-11313375243593,2173687030251,-3049350737137,-10149066516637,5905056311079},\n" +
            "{8462157635811,1251368972967,-1652918150373,1387004841087,1717588765715,-2363517938153,10131123425739,-11456623266449,5477436914243,-4759160995705,5496978719611,-6245443060385},\n" +
            "{-1753331234266,-1925513677266,13587559884182,-4245051751202,-2137179994490,-6553268425970,-6365069498122,517301695678,2263559792870,-11305224483346,-4442850524586,-530899844450},\n" +
            "{4275813471710,-8854105259130,5271931937806,10923452673526,-3574547704386,-1170843994650,-3291920410898,-3656525195434,-4156752563298,11504064802374,16423165925326,1863615493814},\n" +
            "{-2927275271675,4358198759969,-749428089331,-5906764121719,6996620318037,-8434527046863,4013008064989,10544347457817,4690845726117,-1572849494719,-1562550095187,-15622834716247},\n" +
            "{3913481047550,11457107519782,11295936833838,-4892876006250,-2349194285090,-3961586281082,-10007826133490,-9624601063434,-4233142841410,5269765269478,-132373012242,-8329452594858},\n" +
            "{2061373912094,9210433152198,988237794382,-4258740350666,-2513632749570,-9075210294490,-4284690611410,4090527182486,-660764304930,19160463718278,1862849529870,8595956826614}}");
        Result result = BKZ.reduce(basis, 5, params);
        assertEquals(basis.toPrettyString(), control.toPrettyString());
        assertEquals(expected.toPrettyString(), result.getReducedBasis().toPrettyString());
    }

    @Test
    public void testSix() {
        BigMatrix expected = BigMatrix.fromString("{{-3220584277339,-678163098047,-8530386804819,4029288934057,2295848026101,-9298238777007,-3232365392515,-4654942041031,3688082483781,1145092603233,4158323460173,-885077887287},\n" +
            "{-3340516617460,-7558844095460,2998660220908,-8923438766212,-11379173214260,4848015968732,478738963116,-5542299589828,2136460257420,4611134868380,5522033236332,2757441428220},\n" +
            "{10984234085718,-6406011989602,-1266420501434,1751661913550,8482227530934,-4526287024770,761009140390,6928756995246,-5355554536938,-7387675121826,4984680789766,-3267431673458},\n" +
            "{-4681649624622,12840992848490,-9649058669790,-5690163127942,1452987348210,5210479671050,581779614530,-1145467111654,5983719952914,-859604623958,7180148317538,530133880506},\n" +
            "{-4353713886109,-3909056866265,5885683045019,289721495039,8491180601235,-9745719766121,5398662267211,3436570980079,-7847088474685,-4036536560121,-5546606089477,6733721325279},\n" +
            "{2920819071883,-1626942694353,2223911254531,584029693255,14030410377531,-9489189449697,-2775806675149,-11313375243593,2173687030251,-3049350737137,-10149066516637,5905056311079},\n" +
            "{8462157635811,1251368972967,-1652918150373,1387004841087,1717588765715,-2363517938153,10131123425739,-11456623266449,5477436914243,-4759160995705,5496978719611,-6245443060385},\n" +
            "{-1753331234266,-1925513677266,13587559884182,-4245051751202,-2137179994490,-6553268425970,-6365069498122,517301695678,2263559792870,-11305224483346,-4442850524586,-530899844450},\n" +
            "{4275813471710,-8854105259130,5271931937806,10923452673526,-3574547704386,-1170843994650,-3291920410898,-3656525195434,-4156752563298,11504064802374,16423165925326,1863615493814},\n" +
            "{-2927275271675,4358198759969,-749428089331,-5906764121719,6996620318037,-8434527046863,4013008064989,10544347457817,4690845726117,-1572849494719,-1562550095187,-15622834716247},\n" +
            "{3913481047550,11457107519782,11295936833838,-4892876006250,-2349194285090,-3961586281082,-10007826133490,-9624601063434,-4233142841410,5269765269478,-132373012242,-8329452594858},\n" +
            "{2061373912094,9210433152198,988237794382,-4258740350666,-2513632749570,-9075210294490,-4284690611410,4090527182486,-660764304930,19160463718278,1862849529870,8595956826614}}");
        Result result = BKZ.reduce(basis, 6, params);
        assertEquals(basis.toPrettyString(), control.toPrettyString());
        assertEquals(expected.toPrettyString(), result.getReducedBasis().toPrettyString());
    }

    @Test
    public void testSeven() {
        BigMatrix expected = BigMatrix.fromString("{{-3220584277339,-678163098047,-8530386804819,4029288934057,2295848026101,-9298238777007,-3232365392515,-4654942041031,3688082483781,1145092603233,4158323460173,-885077887287},\n" +
            "{-3340516617460,-7558844095460,2998660220908,-8923438766212,-11379173214260,4848015968732,478738963116,-5542299589828,2136460257420,4611134868380,5522033236332,2757441428220},\n" +
            "{10984234085718,-6406011989602,-1266420501434,1751661913550,8482227530934,-4526287024770,761009140390,6928756995246,-5355554536938,-7387675121826,4984680789766,-3267431673458},\n" +
            "{-4681649624622,12840992848490,-9649058669790,-5690163127942,1452987348210,5210479671050,581779614530,-1145467111654,5983719952914,-859604623958,7180148317538,530133880506},\n" +
            "{-4353713886109,-3909056866265,5885683045019,289721495039,8491180601235,-9745719766121,5398662267211,3436570980079,-7847088474685,-4036536560121,-5546606089477,6733721325279},\n" +
            "{2920819071883,-1626942694353,2223911254531,584029693255,14030410377531,-9489189449697,-2775806675149,-11313375243593,2173687030251,-3049350737137,-10149066516637,5905056311079},\n" +
            "{8462157635811,1251368972967,-1652918150373,1387004841087,1717588765715,-2363517938153,10131123425739,-11456623266449,5477436914243,-4759160995705,5496978719611,-6245443060385},\n" +
            "{-1753331234266,-1925513677266,13587559884182,-4245051751202,-2137179994490,-6553268425970,-6365069498122,517301695678,2263559792870,-11305224483346,-4442850524586,-530899844450},\n" +
            "{4275813471710,-8854105259130,5271931937806,10923452673526,-3574547704386,-1170843994650,-3291920410898,-3656525195434,-4156752563298,11504064802374,16423165925326,1863615493814},\n" +
            "{-2927275271675,4358198759969,-749428089331,-5906764121719,6996620318037,-8434527046863,4013008064989,10544347457817,4690845726117,-1572849494719,-1562550095187,-15622834716247},\n" +
            "{3913481047550,11457107519782,11295936833838,-4892876006250,-2349194285090,-3961586281082,-10007826133490,-9624601063434,-4233142841410,5269765269478,-132373012242,-8329452594858},\n" +
            "{2061373912094,9210433152198,988237794382,-4258740350666,-2513632749570,-9075210294490,-4284690611410,4090527182486,-660764304930,19160463718278,1862849529870,8595956826614}}");
        Result result = BKZ.reduce(basis, 7, params);
        assertEquals(basis.toPrettyString(), control.toPrettyString());
        assertEquals(expected.toPrettyString(), result.getReducedBasis().toPrettyString());
    }


    @Test
    public void testEight() {
        BigMatrix expected = BigMatrix.fromString("{{-3220584277339,-678163098047,-8530386804819,4029288934057,2295848026101,-9298238777007,-3232365392515,-4654942041031,3688082483781,1145092603233,4158323460173,-885077887287},\n" +
            "{-3340516617460,-7558844095460,2998660220908,-8923438766212,-11379173214260,4848015968732,478738963116,-5542299589828,2136460257420,4611134868380,5522033236332,2757441428220},\n" +
            "{10984234085718,-6406011989602,-1266420501434,1751661913550,8482227530934,-4526287024770,761009140390,6928756995246,-5355554536938,-7387675121826,4984680789766,-3267431673458},\n" +
            "{-4681649624622,12840992848490,-9649058669790,-5690163127942,1452987348210,5210479671050,581779614530,-1145467111654,5983719952914,-859604623958,7180148317538,530133880506},\n" +
            "{-4353713886109,-3909056866265,5885683045019,289721495039,8491180601235,-9745719766121,5398662267211,3436570980079,-7847088474685,-4036536560121,-5546606089477,6733721325279},\n" +
            "{2920819071883,-1626942694353,2223911254531,584029693255,14030410377531,-9489189449697,-2775806675149,-11313375243593,2173687030251,-3049350737137,-10149066516637,5905056311079},\n" +
            "{8462157635811,1251368972967,-1652918150373,1387004841087,1717588765715,-2363517938153,10131123425739,-11456623266449,5477436914243,-4759160995705,5496978719611,-6245443060385},\n" +
            "{-1753331234266,-1925513677266,13587559884182,-4245051751202,-2137179994490,-6553268425970,-6365069498122,517301695678,2263559792870,-11305224483346,-4442850524586,-530899844450},\n" +
            "{4275813471710,-8854105259130,5271931937806,10923452673526,-3574547704386,-1170843994650,-3291920410898,-3656525195434,-4156752563298,11504064802374,16423165925326,1863615493814},\n" +
            "{-2927275271675,4358198759969,-749428089331,-5906764121719,6996620318037,-8434527046863,4013008064989,10544347457817,4690845726117,-1572849494719,-1562550095187,-15622834716247},\n" +
            "{3913481047550,11457107519782,11295936833838,-4892876006250,-2349194285090,-3961586281082,-10007826133490,-9624601063434,-4233142841410,5269765269478,-132373012242,-8329452594858},\n" +
            "{2061373912094,9210433152198,988237794382,-4258740350666,-2513632749570,-9075210294490,-4284690611410,4090527182486,-660764304930,19160463718278,1862849529870,8595956826614}}");
        Result result = BKZ.reduce(basis, 8, params);
        assertEquals(basis.toPrettyString(), control.toPrettyString());
        assertEquals(expected.toPrettyString(), result.getReducedBasis().toPrettyString());
    }

    @Test
    public void testNine() {
        BigMatrix expected = BigMatrix.fromString("{{-3220584277339,-678163098047,-8530386804819,4029288934057,2295848026101,-9298238777007,-3232365392515,-4654942041031,3688082483781,1145092603233,4158323460173,-885077887287},\n" +
            "{-3340516617460,-7558844095460,2998660220908,-8923438766212,-11379173214260,4848015968732,478738963116,-5542299589828,2136460257420,4611134868380,5522033236332,2757441428220},\n" +
            "{10984234085718,-6406011989602,-1266420501434,1751661913550,8482227530934,-4526287024770,761009140390,6928756995246,-5355554536938,-7387675121826,4984680789766,-3267431673458},\n" +
            "{-4681649624622,12840992848490,-9649058669790,-5690163127942,1452987348210,5210479671050,581779614530,-1145467111654,5983719952914,-859604623958,7180148317538,530133880506},\n" +
            "{-4353713886109,-3909056866265,5885683045019,289721495039,8491180601235,-9745719766121,5398662267211,3436570980079,-7847088474685,-4036536560121,-5546606089477,6733721325279},\n" +
            "{2920819071883,-1626942694353,2223911254531,584029693255,14030410377531,-9489189449697,-2775806675149,-11313375243593,2173687030251,-3049350737137,-10149066516637,5905056311079},\n" +
            "{8462157635811,1251368972967,-1652918150373,1387004841087,1717588765715,-2363517938153,10131123425739,-11456623266449,5477436914243,-4759160995705,5496978719611,-6245443060385},\n" +
            "{-1753331234266,-1925513677266,13587559884182,-4245051751202,-2137179994490,-6553268425970,-6365069498122,517301695678,2263559792870,-11305224483346,-4442850524586,-530899844450},\n" +
            "{4275813471710,-8854105259130,5271931937806,10923452673526,-3574547704386,-1170843994650,-3291920410898,-3656525195434,-4156752563298,11504064802374,16423165925326,1863615493814},\n" +
            "{-2927275271675,4358198759969,-749428089331,-5906764121719,6996620318037,-8434527046863,4013008064989,10544347457817,4690845726117,-1572849494719,-1562550095187,-15622834716247},\n" +
            "{3913481047550,11457107519782,11295936833838,-4892876006250,-2349194285090,-3961586281082,-10007826133490,-9624601063434,-4233142841410,5269765269478,-132373012242,-8329452594858},\n" +
            "{2061373912094,9210433152198,988237794382,-4258740350666,-2513632749570,-9075210294490,-4284690611410,4090527182486,-660764304930,19160463718278,1862849529870,8595956826614}}");
        Result result = BKZ.reduce(basis, 9, params);
        assertEquals(basis.toPrettyString(), control.toPrettyString());
        assertEquals(expected.toPrettyString(), result.getReducedBasis().toPrettyString());
    }


    @Test
    public void testTen() {
        BigMatrix expected = BigMatrix.fromString("{{-3220584277339,-678163098047,-8530386804819,4029288934057,2295848026101,-9298238777007,-3232365392515,-4654942041031,3688082483781,1145092603233,4158323460173,-885077887287},\n" +
            "{-3340516617460,-7558844095460,2998660220908,-8923438766212,-11379173214260,4848015968732,478738963116,-5542299589828,2136460257420,4611134868380,5522033236332,2757441428220},\n" +
            "{10984234085718,-6406011989602,-1266420501434,1751661913550,8482227530934,-4526287024770,761009140390,6928756995246,-5355554536938,-7387675121826,4984680789766,-3267431673458},\n" +
            "{-4681649624622,12840992848490,-9649058669790,-5690163127942,1452987348210,5210479671050,581779614530,-1145467111654,5983719952914,-859604623958,7180148317538,530133880506},\n" +
            "{-4353713886109,-3909056866265,5885683045019,289721495039,8491180601235,-9745719766121,5398662267211,3436570980079,-7847088474685,-4036536560121,-5546606089477,6733721325279},\n" +
            "{2920819071883,-1626942694353,2223911254531,584029693255,14030410377531,-9489189449697,-2775806675149,-11313375243593,2173687030251,-3049350737137,-10149066516637,5905056311079},\n" +
            "{8462157635811,1251368972967,-1652918150373,1387004841087,1717588765715,-2363517938153,10131123425739,-11456623266449,5477436914243,-4759160995705,5496978719611,-6245443060385},\n" +
            "{-1753331234266,-1925513677266,13587559884182,-4245051751202,-2137179994490,-6553268425970,-6365069498122,517301695678,2263559792870,-11305224483346,-4442850524586,-530899844450},\n" +
            "{4275813471710,-8854105259130,5271931937806,10923452673526,-3574547704386,-1170843994650,-3291920410898,-3656525195434,-4156752563298,11504064802374,16423165925326,1863615493814},\n" +
            "{-2927275271675,4358198759969,-749428089331,-5906764121719,6996620318037,-8434527046863,4013008064989,10544347457817,4690845726117,-1572849494719,-1562550095187,-15622834716247},\n" +
            "{3913481047550,11457107519782,11295936833838,-4892876006250,-2349194285090,-3961586281082,-10007826133490,-9624601063434,-4233142841410,5269765269478,-132373012242,-8329452594858},\n" +
            "{2061373912094,9210433152198,988237794382,-4258740350666,-2513632749570,-9075210294490,-4284690611410,4090527182486,-660764304930,19160463718278,1862849529870,8595956826614}}");
        Result result = BKZ.reduce(basis, 10, params);
        assertEquals(basis.toPrettyString(), control.toPrettyString());
        assertEquals(expected.toPrettyString(), result.getReducedBasis().toPrettyString());
    }


    @Test
    public void testEleven() {
        BigMatrix expected = BigMatrix.fromString("{{-3220584277339,-678163098047,-8530386804819,4029288934057,2295848026101,-9298238777007,-3232365392515,-4654942041031,3688082483781,1145092603233,4158323460173,-885077887287},\n" +
            "{-3340516617460,-7558844095460,2998660220908,-8923438766212,-11379173214260,4848015968732,478738963116,-5542299589828,2136460257420,4611134868380,5522033236332,2757441428220},\n" +
            "{10984234085718,-6406011989602,-1266420501434,1751661913550,8482227530934,-4526287024770,761009140390,6928756995246,-5355554536938,-7387675121826,4984680789766,-3267431673458},\n" +
            "{-4681649624622,12840992848490,-9649058669790,-5690163127942,1452987348210,5210479671050,581779614530,-1145467111654,5983719952914,-859604623958,7180148317538,530133880506},\n" +
            "{-4353713886109,-3909056866265,5885683045019,289721495039,8491180601235,-9745719766121,5398662267211,3436570980079,-7847088474685,-4036536560121,-5546606089477,6733721325279},\n" +
            "{2920819071883,-1626942694353,2223911254531,584029693255,14030410377531,-9489189449697,-2775806675149,-11313375243593,2173687030251,-3049350737137,-10149066516637,5905056311079},\n" +
            "{8462157635811,1251368972967,-1652918150373,1387004841087,1717588765715,-2363517938153,10131123425739,-11456623266449,5477436914243,-4759160995705,5496978719611,-6245443060385},\n" +
            "{-1753331234266,-1925513677266,13587559884182,-4245051751202,-2137179994490,-6553268425970,-6365069498122,517301695678,2263559792870,-11305224483346,-4442850524586,-530899844450},\n" +
            "{4275813471710,-8854105259130,5271931937806,10923452673526,-3574547704386,-1170843994650,-3291920410898,-3656525195434,-4156752563298,11504064802374,16423165925326,1863615493814},\n" +
            "{-2927275271675,4358198759969,-749428089331,-5906764121719,6996620318037,-8434527046863,4013008064989,10544347457817,4690845726117,-1572849494719,-1562550095187,-15622834716247},\n" +
            "{3913481047550,11457107519782,11295936833838,-4892876006250,-2349194285090,-3961586281082,-10007826133490,-9624601063434,-4233142841410,5269765269478,-132373012242,-8329452594858},\n" +
            "{2061373912094,9210433152198,988237794382,-4258740350666,-2513632749570,-9075210294490,-4284690611410,4090527182486,-660764304930,19160463718278,1862849529870,8595956826614}}");
        Result result = BKZ.reduce(basis, 11, params);
        assertEquals(basis.toPrettyString(), control.toPrettyString());
        assertEquals(expected.toPrettyString(), result.getReducedBasis().toPrettyString());
    }

    @Test
    public void testTwelve() {
        BigMatrix expected = BigMatrix.fromString("{{-3220584277339,-678163098047,-8530386804819,4029288934057,2295848026101,-9298238777007,-3232365392515,-4654942041031,3688082483781,1145092603233,4158323460173,-885077887287},\n" +
            "{-3340516617460,-7558844095460,2998660220908,-8923438766212,-11379173214260,4848015968732,478738963116,-5542299589828,2136460257420,4611134868380,5522033236332,2757441428220},\n" +
            "{10984234085718,-6406011989602,-1266420501434,1751661913550,8482227530934,-4526287024770,761009140390,6928756995246,-5355554536938,-7387675121826,4984680789766,-3267431673458},\n" +
            "{-4681649624622,12840992848490,-9649058669790,-5690163127942,1452987348210,5210479671050,581779614530,-1145467111654,5983719952914,-859604623958,7180148317538,530133880506},\n" +
            "{-4353713886109,-3909056866265,5885683045019,289721495039,8491180601235,-9745719766121,5398662267211,3436570980079,-7847088474685,-4036536560121,-5546606089477,6733721325279},\n" +
            "{2920819071883,-1626942694353,2223911254531,584029693255,14030410377531,-9489189449697,-2775806675149,-11313375243593,2173687030251,-3049350737137,-10149066516637,5905056311079},\n" +
            "{8462157635811,1251368972967,-1652918150373,1387004841087,1717588765715,-2363517938153,10131123425739,-11456623266449,5477436914243,-4759160995705,5496978719611,-6245443060385},\n" +
            "{-1753331234266,-1925513677266,13587559884182,-4245051751202,-2137179994490,-6553268425970,-6365069498122,517301695678,2263559792870,-11305224483346,-4442850524586,-530899844450},\n" +
            "{4275813471710,-8854105259130,5271931937806,10923452673526,-3574547704386,-1170843994650,-3291920410898,-3656525195434,-4156752563298,11504064802374,16423165925326,1863615493814},\n" +
            "{-2927275271675,4358198759969,-749428089331,-5906764121719,6996620318037,-8434527046863,4013008064989,10544347457817,4690845726117,-1572849494719,-1562550095187,-15622834716247},\n" +
            "{3913481047550,11457107519782,11295936833838,-4892876006250,-2349194285090,-3961586281082,-10007826133490,-9624601063434,-4233142841410,5269765269478,-132373012242,-8329452594858},\n" +
            "{2061373912094,9210433152198,988237794382,-4258740350666,-2513632749570,-9075210294490,-4284690611410,4090527182486,-660764304930,19160463718278,1862849529870,8595956826614}}");
        Result result = BKZ.reduce(basis, 12, params);
        assertEquals(basis.toPrettyString(), control.toPrettyString());
        assertEquals(expected.toPrettyString(), result.getReducedBasis().toPrettyString());
    }

    @Test(expected = IllegalArgumentException.class)
    public void testThirteen() {
        Result result = BKZ.reduce(basis, 13, params);
        // TODO compute it for test
    }


}
